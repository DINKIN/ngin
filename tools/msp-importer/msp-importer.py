# This tool imports NES Screen Tool .msp (metasprite) files.

import argparse
import uuid
import os

class HardwareSprite( object ):
    def __init__( self, x, y, tile, attributes ):
        self.x = x
        self.y = y
        self.tile = tile
        self.attributes = attributes

class Metasprite( object ):
    def __init__( self, symbol ):
        self.symbol = symbol
        self.hardwareSprites = []

def importMsps( infiles ):
    metasprites = []

    for infile in infiles:
        with open( infile.file, "rb" ) as f:
            def readByte():
                return ord( f.read( 1 ) )

            def readBytes( count ):
                return tuple( map( ord, f.read( count ) ) )

            originX, originY = readBytes( 2 )
            for metaspriteIndex in range( 256 ):
                metasprite = Metasprite( "{}_{}".format(
                    infile.symbolPrefix, metaspriteIndex ) )
                for hardwareSpriteIndex in range( 64 ):
                    y, tile, attributes, x = readBytes( 4 )
                    # \note Can't break here without seek().
                    if y == 0xFF: continue
                    metasprite.hardwareSprites.append( HardwareSprite(
                        x-originX, y-originY, tile, attributes
                    ) )
                if len( metasprite.hardwareSprites ) > 0:
                    metasprites.append( metasprite )

    return metasprites

def writeData( outPrefix, metasprites ):
    with open( outPrefix + ".s", "w" ) as f:
        f.write( "; Data generated by Ngin msp-importer.py\n\n" )

        outPrefixBase = os.path.basename( outPrefix )
        f.write( '.include "{}.inc"\n'.format( outPrefixBase ) )
        f.write( '.include "ngin/ngin.inc"\n\n' )

        f.write( 'ngin_pushSeg "RODATA"\n\n' )

        # Frame delay doesn't really matter, since no animations can be
        # defined in MSP files. \todo Use the largest possible value?
        kFrameDelay = 5
        for metasprite in metasprites:
            f.write( ".proc {}\n".format( metasprite.symbol ) )

            f.write( "    ngin_SpriteRenderer_metasprite {:}, {}".format(
                kFrameDelay, metasprite.symbol
            ) )
            f.write( "\n" )

            for hardwareSprite in metasprite.hardwareSprites:
                f.write( ( "        ngin_SpriteRenderer_sprite " + \
                    "{:4}, {:4}, {:4}, {:3}\n" ).format(
                        hardwareSprite.x, hardwareSprite.y,
                        hardwareSprite.tile, hardwareSprite.attributes
                ) )

            f.write( "    ngin_SpriteRenderer_endMetasprite\n" )
            f.write( ".endproc\n\n" )

        f.write( "ngin_popSeg\n\n" )

    with open( outPrefix + ".inc", "w" ) as f:
        uniqueSymbol = "NGIN_MSP_IMPORTER_" + \
                       str( uuid.uuid4() ).upper().replace( "-", "_" )
        f.write( ".if .not .defined( {} )\n".format( uniqueSymbol ) )
        f.write( "{} = 1\n\n".format( uniqueSymbol ) )
        f.write( '.include "ngin/ngin.inc"\n\n' )

        for metasprite in metasprites:
            f.write( ".global {}\n".format( metasprite.symbol ) )

        f.write( "\n.endif\n" )

class SymbolArg( object ):
    def __init__( self, symbol ):
        self.symbol = symbol

class InfileArg( object ):
    def __init__( self, infile ):
        self.infile = infile

class Infile( object ):
    def __init__( self, file, symbolPrefix ):
        self.file           = file
        self.symbolPrefix   = symbolPrefix

def main():
    argParser = argparse.ArgumentParser(
        description="Import NES Screen Tool MSP metasprites into Ngin" )

    argParser.add_argument( "-i", "--infile", dest="infiles", action="append",
                            type=InfileArg, metavar="FILE", required=True )
    argParser.add_argument( "-s", "--symbol", dest="infiles", action="append",
                            type=SymbolArg, metavar="SYMBOL", required=True )

    argParser.add_argument( "-o", "--outprefix", required=True,
        help="prefix for output files", metavar="PREFIX" )

    args = argParser.parse_args()

    # Gather the input files and their options from the command arguments.
    gatheredInfiles = []
    currentSymbol   = None
    for entry in args.infiles:
        if isinstance( entry, SymbolArg ):
            currentSymbol = entry.symbol
        elif isinstance( entry, InfileArg ):
            assert currentSymbol is not None
            gatheredInfiles.append( Infile( entry.infile, currentSymbol ) )

    metasprites = importMsps( gatheredInfiles )
    writeData( args.outprefix, metasprites )

main()
