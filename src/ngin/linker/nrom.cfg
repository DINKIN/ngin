symbols
{
    # How big of a stack is used for function stack frames. The rest of the
    # stack can be used for other purposes.
    __ngin_stackSize: type = weak, value = 16;
}

memory
{
    INES_HEADER:
        start   = 0,
        size    = 16,
        type    = ro,
        fillval = 0,
        fill    = yes;

    ZEROPAGE:
        start = 0,
        size  = 256,
        type  = rw;

    # The area of stack memory that can be used for user-defined purposes.
    STACK:
        start = $100,
        size  = 256 - __ngin_stackSize,
        type  = rw;

    RAM:
        # Skip zeropage and stack.
        start = $200,
        size  = 2*1024 - 2*256,
        type  = rw;

    PRG_ROM:
        start = $8000,
        size  = 32*1024,
        type  = ro,
        fill  = yes;

    CHR_ROM:
        start = 0,
        size  = 8*1024,
        type  = ro,
        fill  = yes;

    BUILD_LOG:
        start = 0,
        size  = 64*1024,
        type  = ro,
        file  = "%O-build-log.txt";

    NDXDEBUG:
        start = 0,
        # 256 MB should be enough for everybody.
        size  = 256*1024*1024,
        type  = ro,
        file  = "%O.ndx";
}

segments
{
    INES_HEADER:
        load = INES_HEADER,
        type = ro;

    NGIN_CODE:
        load   = PRG_ROM,
        type   = ro,
        define = yes,
        # The way alignment is handled in cc65 is sort of dumb at the moment.
        align  = 32;

    # This segment should be placed right before the entry point of the reset
    # code. It should never generate any actual data, only symbols in the debug
    # information.
    NGIN_LUA_REQUIRE:
        load     = PRG_ROM,
        type     = ro,
        optional = yes;

    NGIN_RESET_PROLOGUE:
        load   = PRG_ROM,
        type   = ro,
        define = yes;

    NGIN_RESET_CONSTRUCTORS:
        load   = PRG_ROM,
        type   = ro,
        define = yes;

    NGIN_RESET_EPILOGUE:
        load   = PRG_ROM,
        type   = ro,
        define = yes;

    NGIN_RODATA:
        load     = PRG_ROM,
        type     = ro,
        optional = yes,
        define   = yes;

    NGIN_ZEROPAGE:
        load     = ZEROPAGE,
        type     = zp,
        optional = yes;

    NGIN_STACK:
        load     = STACK,
        type     = bss,
        optional = yes;

    NGIN_SHADOW_OAM:
        load     = RAM,
        type     = bss,
        optional = yes;

    NGIN_BSS:
        load     = RAM,
        type     = bss,
        optional = yes,
        define   = yes;

    NGIN_BUILD_LOG_HEADER:
        load     = BUILD_LOG,
        type     = ro,
        optional = yes;

    NGIN_BUILD_LOG:
        load     = BUILD_LOG,
        type     = ro,
        optional = yes;

    CODE:
        load   = PRG_ROM,
        type   = ro,
        define = yes,
        align  = 32;

    OBJECT_CONSTRUCT_LO:
        load   = PRG_ROM,
        type   = ro,
        define = yes;

    OBJECT_CONSTRUCT_HI:
        load   = PRG_ROM,
        type   = ro,
        define = yes;

    OBJECT_UPDATE_LO:
        load   = PRG_ROM,
        type   = ro,
        define = yes;

    OBJECT_UPDATE_HI:
        load   = PRG_ROM,
        type   = ro,
        define = yes;

    RODATA:
        load     = PRG_ROM,
        type     = ro,
        optional = yes,
        define   = yes;

    ZEROPAGE:
        load     = ZEROPAGE,
        type     = zp,
        optional = yes;

    STACK:
        load     = STACK,
        type     = bss,
        optional = yes;

    BSS:
        load     = RAM,
        type     = bss,
        optional = yes,
        define   = yes;

    VECTORS:
        load  = PRG_ROM,
        type  = ro,
        start = $FFFA;

    CHR_ROM:
        load     = CHR_ROM,
        type     = ro,
        optional = yes,
        align    = 32;

    BUILD_LOG:
        load     = BUILD_LOG,
        type     = ro,
        optional = yes;

    NDXDEBUG:
        load     = NDXDEBUG,
        type     = ro,
        optional = yes;
}
