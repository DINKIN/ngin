add_library( ngin STATIC
    linker-config-dummy.s
    reset.s
    vectors.s
    ines-header.s
    ppu.s
    shadow-oam.s
    sprite-renderer.s
    memory.s
    memory/copy-memory.s
    memory/copy-port.s
    memory/copy-memory-to-port.s
    memory/copy-port-to-memory.s
    memory/fill-memory.s
    memory/fill-port.s
    ppu-buffer.s
    build-log.s
    force-import.s
    controller/controller-common.s
    controller/controller1.s
    controller/controller2.s
    collision.s
    map-data.s
    map-scroller.s
    nmi.s
    map-collision.s
    camera.s
    lfsr8.s
    object.s
    force-segment.s
    object-spawner.s
    debug/upload-debug-palette.s
    sprite-animator.s
    log.s
    assert.s
)

# \note Debug info is added to the release build also, because might as well.
set( __ngin_compileFlags
    "-t none -g --feature underline_in_numbers --feature c_comments \
--asm-include-dir ${CMAKE_SOURCE_DIR}/include --cpu 6502x"
)
set( __ngin_linkerConfig "linker/nrom.cfg" )
set( __ngin_sourceDir ${CMAKE_CURRENT_SOURCE_DIR} )

set_target_properties( ngin
    PROPERTIES
        COMPILE_FLAGS "${__ngin_compileFlags}"
)

# Export to parent scope.
set( __ngin_compileFlags ${__ngin_compileFlags} PARENT_SCOPE )
set( __ngin_linkerConfig ${__ngin_linkerConfig} PARENT_SCOPE )
set( __ngin_sourceDir ${__ngin_sourceDir} PARENT_SCOPE )

set_source_files_properties( linker-config-dummy.s
    PROPERTIES
        OBJECT_DEPENDS ${__ngin_sourceDir}/${__ngin_linkerConfig}
)

function( ngin_addSample name )
    add_executable( ${name} ${ARGN} )

    # Add the binary directory as include and binary include directory
    # so that results generated by asset processing tools are found.
    # Specifying absolute path for --asm-include-dir and
    # --bin-include-dir causes absolute path references to show up in
    # the dependency file generated by ca65, which for some reason
    # confuses Ninja's dependency resolution, so we convert to a
    # relative path.
    file( RELATIVE_PATH currentBinaryDirRelative ${CMAKE_BINARY_DIR}
        ${CMAKE_CURRENT_BINARY_DIR} )

    set_target_properties( ${name}
        PROPERTIES
            OUTPUT_NAME ${name}.nes
            COMPILE_FLAGS "${__ngin_compileFlags} \
--asm-include-dir ${currentBinaryDirRelative} \
--bin-include-dir ${currentBinaryDirRelative}"
            # \note --force-import is needed to bring in object files from the
            #       static library which would be otherwise stripped.
            LINK_FLAGS "-t none -C ${__ngin_sourceDir}/${__ngin_linkerConfig} \
--force-import __ngin_forceImport \
-Wl --dbgfile,${currentBinaryDirRelative}/${name}.nes.dbg \
-m ${name}-map.txt"
    )

    target_link_libraries( ${name}
        ngin
    )

    # Add a custom target to start an emulator.
    add_custom_target(
        "start-${name}"
        COMMAND
            ${__ngin_emulatorExecutable} ${currentBinaryDirRelative}/${name}.nes
        DEPENDS ${name}
        # \note NintendulatorDX v36 or later is required for this to work,
        #       older versions will not find the source files relative to the
        #       current working directory.
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
        COMMENT "Running ${name}"
        VERBATIM
    )
endfunction()
